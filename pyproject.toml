[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "deadline"
description = "Multi-purpose library and command line tool that implements functionality to support applications using AWS Deadline Cloud."
authors = [
  {name = "Amazon Web Services"},
]
dynamic = ["version"]
readme = "README.md"
license = "Apache-2.0"
requires-python = ">=3.8"
# https://pypi.org/classifiers/
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Operating System :: POSIX :: Linux",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: MacOS",
  "License :: OSI Approved :: Apache Software License",
  "Intended Audience :: Developers",
  "Intended Audience :: End Users/Desktop",
  "Topic :: Software Development :: Libraries"
]

# Note: All deps should be using >= since this is a *library* as well as an application.
# Applications that consume this library should be the ones that are more strictly
# limiting dependencies if they want/need to.
dependencies = [
    "boto3 >= 1.34.75",
    "click >= 8.1.7",
    "pyyaml >= 6.0",
    # Job Attachments
    "typing_extensions >= 4.7,< 4.12; python_version == '3.7'",
    "typing_extensions >= 4.8; python_version > '3.7'",
    # Pinning due to 3.4 not being available upstream
    "xxhash == 3.4.*",
    # Pinning due to new 4.18 dependencies breaking pyinstaller implementation
    "jsonschema == 4.17.*",
    "pywin32 == 306; sys_platform == 'win32'",
    "QtPy == 2.4.*",
]

[project.urls]
Homepage = "https://github.com/aws-deadline/deadline-cloud"
Source = "https://github.com/aws-deadline/deadline-cloud"

[project.optional-dependencies]
gui = [
    # If the version changes, update the version in deadline/client/ui/__init__.py
    "PySide6-essentials == 6.6.*",
]

[project.scripts]
deadline-dev-gui = "deadline.client.cli.deadline_dev_gui_main:main"
deadline = "deadline.client.cli:main"

[tool.hatch.build]
artifacts = [
  "*_version.py",
]

[tool.hatch.version]
source = "vcs"

[tool.hatch.version.raw-options]
version_scheme = "post-release"

[tool.hatch.build.hooks.vcs]
version-file = "_version.py"

[tool.hatch.build.hooks.custom]
path = "hatch_custom_hook.py"

[tool.hatch.build.hooks.custom.copy_version_py]
destinations = [
  "src/deadline/client",
  "src/deadline/job_attachments",
]

[tool.hatch.build.targets.sdist]
include = [
  "src/*",
  "hatch_version_hook.py",
  "THIRD_PARTY_LICENSES",
]

[tool.hatch.build.targets.wheel]
packages = [
  "src/deadline",
]

[tool.mypy]
# Enables the type-checker on the interior of functions without type annotations.
check_untyped_defs = true
# Displaying specific error codes makes it easier to silence specific errors
show_error_codes = true
# Show source code snippets and location markers in error messages
pretty = true
# Prohibit equality checks, identity checks, and container checks between non-overlapping types.
strict_equality = true
ignore_missing_imports = true
# Tell mypy that there's a namespace package at src/deadline
namespace_packages = true
explicit_package_bases = true
mypy_path = "src"

[[tool.mypy.overrides]]
module = [
  "qtpy.*",
  "boto3.*",
  "botocore.*",
  "moto.*",
  "xxhash",
  "jsonschema",
]

[[tool.mypy.overrides]]
module = "deadline.client.ui.*"
# 1. [attr-defined] - It thinks Qt, etc. are types and can't see their attributes
# 2. [assignment] - we have a lot of self.layout assignments in QWidgets
disable_error_code = ["attr-defined", "assignment"]

[tool.ruff]
line-length = 100

[tool.ruff.lint]
ignore = [
  "E501",
]

[tool.ruff.lint.isort]
known-first-party = [
  "deadline"
]

[tool.ruff.lint.per-file-ignores]
# We need to use a platform assertion to short-circuit mypy type checking on non-Windows platforms
# https://mypy.readthedocs.io/en/stable/common_issues.html#python-version-and-system-platform-checks
# This causes imports to come after regular Python statements causing flake8 rule E402 to be flagged
"src/deadline/job_attachments/_windows/*.py" = ["E402"]

[tool.black]
line-length = 100

# Configuration for pytest; enable coverage for deadline_worker_agent, emit
# XML, HTML, and terminal reports.
[tool.pytest.ini_options]
xfail_strict = true
addopts = [
    "--durations=5",
    "--color=yes",
    "--cov=src/deadline",
    "--cov-report=html:build/coverage",
    "--cov-report=xml:build/coverage/coverage.xml",
    "--cov-report=term-missing",
    "--numprocesses=auto"
]
testpaths = [ "test/unit" ]
looponfailroots = [
    "src",
    "test/unit",
]
markers = [
    "no_setup: mark that test shouldn't use default setups",
    "integ: tests that run against AWS resources",
    "docker: marks tests to be run only in a Docker environment",
]
# looponfailroots is deprecated, this removes the deprecation from the test output
filterwarnings = [
    "ignore::DeprecationWarning"
]


[tool.coverage.run]
disable_warnings = ["module-not-measured"]
branch = true
parallel = false
source_pkgs = [ "deadline" ]
omit = [
    "*/deadline/client/ui/*",
]
plugins = [
  "coverage_conditional_plugin"
]

[tool.coverage.paths]
source = [ "src/" ]

[tool.coverage.report]
show_missing = true
fail_under = 80

# https://github.com/wemake-services/coverage-conditional-plugin
[tool.coverage.coverage_conditional_plugin.omit]
"sys_platform != 'win32'" = [
  "src/deadline/job_attachments/_windows/*.py",
]

[tool.coverage.coverage_conditional_plugin.rules]
# This cannot be empty otherwise coverage-conditional-plugin crashes with:
# AttributeError: 'NoneType' object has no attribute 'items'
#
# =========== WARNING TO REVIEWERS ============
#
# Any rules added here are ran through Python's
# eval() function so watch for code injection
# attacks.
#
# =========== WARNING TO REVIEWERS ============

[tool.semantic_release]
# Can be removed or set to true once we are v1
major_on_zero = false
tag_format = "{version}"

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore",
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "style",
    "refactor",
    "test",
    "revert",
]
minor_tags = []
patch_tags = [
  "chore",
  "feat",
  "fix",
  "refactor",
]

[tool.semantic_release.publish]
upload_to_vcs_release = false

[tool.semantic_release.changelog]
template_dir = ".semantic_release"

[tool.semantic_release.changelog.environment]
trim_blocks = true
lstrip_blocks = true

[tool.semantic_release.branches.release]
match = "(mainline|release)"
