[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "deadline"
dynamic = ["version"]
readme = "README.md"
license = ""
requires-python = ">=3.7"

# Note: All deps should be using >= since this is a *library* as well as an application.
# Applications that consume this library should be the ones that are more strictly
# limiting dependencies if they want/need to.
dependencies = [
    "boto3 >= 1.28.80",
    "click >= 8.1.7",
    "pyyaml >= 6.0",
    # Job Attachments
    "typing_extensions == 4.10.*; python_version == '3.7'",
    "typing_extensions >= 4.8; python_version > '3.7'",
    # Pinning due to 3.4 not being available upstream
    "xxhash == 3.4.*",
    # Pinning due to new 4.18 dependencies breaking pyinstaller implementation
    "jsonschema == 4.17.*",
    "pywin32 == 306; sys_platform == 'win32'",
]

[project.scripts]
deadline-dev-gui = "deadline.client.cli.deadline_dev_gui_main:main"
deadline = "deadline.client.cli:main"

[tool.hatch.build]
artifacts = [
  "*_version.py",
]

[tool.hatch.version]
source = "vcs"

[tool.hatch.version.raw-options]
version_scheme = "post-release"

[tool.hatch.build.hooks.vcs]
version-file = "_version.py"

[tool.hatch.build.hooks.custom]
path = "hatch_custom_hook.py"

[tool.hatch.build.hooks.custom.copy_version_py]
destinations = [
  "src/deadline/client",
  "src/deadline/job_attachments",
]

[tool.hatch.build.targets.sdist]
include = [
  "src/*",
  "hatch_version_hook.py",
  "THIRD_PARTY_LICENSES",
]

[tool.hatch.build.targets.wheel]
packages = [
  "src/deadline",
  # TODO: Remove this once consumers update to deadline.job_attachments
  "src/deadline_job_attachments",
]

[tool.mypy]
# Enables the type-checker on the interior of functions without type annotations.
check_untyped_defs = true
# Displaying specific error codes makes it easier to silence specific errors
show_error_codes = true
# Show source code snippets and location markers in error messages
pretty = true
# Prohibit equality checks, identity checks, and container checks between non-overlapping types.
strict_equality = true
ignore_missing_imports = true
# Tell mypy that there's a namespace package at src/deadline
namespace_packages = true
explicit_package_bases = true
mypy_path = "src"

[[tool.mypy.overrides]]
module = [
  "PySide2.*",
  "boto3.*",
  "botocore.*",
  "moto.*",
  "xxhash",
  "jsonschema",
]

[tool.ruff]
ignore = [
  "E501",
]
line-length = 100

[tool.ruff.isort]
known-first-party = [
  "deadline"
]

[tool.black]
line-length = 100

# Configuration for pytest; enable coverage for deadline_worker_agent, emit
# XML, HTML, and terminal reports.
[tool.pytest.ini_options]
xfail_strict = true
addopts = [
    "--durations=5",
    "--color=yes",
    "--cov=src/deadline",
    "--cov-report=html:build/coverage",
    "--cov-report=xml:build/coverage/coverage.xml",
    "--cov-report=term-missing",
    "--numprocesses=auto"
]
testpaths = [ "test/unit" ]
looponfailroots = [
    "src",
    "test/unit",
]
markers = [
    "no_setup: mark that test shouldn't use default setups",
    "integ: tests that run against AWS resources",
    "docker: marks tests to be run only in a Docker environment",
]
# looponfailroots is deprecated, this removes the deprecation from the test output
filterwarnings = [
    "ignore::DeprecationWarning"
]


[tool.coverage.run]
disable_warnings = ["module-not-measured"]
branch = true
parallel = false
source_pkgs = [ "deadline" ]
omit = [
    "*/deadline/client/ui/*",
]

[tool.coverage.paths]
source = [ "src/" ]

[tool.coverage.report]
show_missing = true
fail_under = 80

[tool.semantic_release]
# Can be removed or set to true once we are v1
major_on_zero = false
tag_format = "{version}"

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore",
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "style",
    "refactor",
    "test",
]
minor_tags = []
patch_tags = [
  "chore",
  "feat",
  "fix",
  "refactor",
]

[tool.semantic_release.publish]
upload_to_vcs_release = false

[tool.semantic_release.changelog]
template_dir = ".semantic_release"

[tool.semantic_release.changelog.environment]
trim_blocks = true
lstrip_blocks = true

[tool.semantic_release.branches.release]
match = "(mainline|release)"
